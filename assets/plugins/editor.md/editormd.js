!function(e){"use strict";"function"==typeof require&&"object"==typeof exports&&"object"==typeof module?module.exports=e:"function"==typeof define?define.amd||define(["jquery"],e):window.editormd=e()}(function(){"use strict";var b="undefined"!=typeof jQuery?jQuery:Zepto;if(void 0!==b){var f,g,x=function(e,t){return new x.fn.init(e,t)};x.title=x.$name="Editor.md",x.version="1.5.0",x.homePage=window.location.href+"?name=",x.classPrefix="editormd-",x.toolbarModes={full:["undo","redo","|","bold","del","italic","quote","ucwords","uppercase","lowercase","|","h1","h2","h3","h4","h5","h6","|","list-ul","list-ol","hr","|","link","reference-link","image","code","code-block","table","datetime","html-entities","|","goto-line","watch","preview","clear","|","redirect","saving","||","help"],simple:["undo","redo","|","bold","del","italic","quote","uppercase","lowercase","|","h1","h2","h3","h4","h5","h6","|","list-ul","list-ol","hr","|","watch","preview","|","redirect","saving","||","help"],mini:["undo","redo","|","watch","preview","|","redirect","saving","||","help"]},x.defaults={mode:"gfm",name:"",value:"",theme:"",editorTheme:"default",previewTheme:"",markdown:"",appendMarkdown:"",width:"100%",height:"100%",path:"/static/plugins/editor.md/lib/",pluginPath:"",delay:300,autoLoadModules:!0,watch:!0,placeholder:"欢迎使用Markdown编辑器。。。",gotoLine:!0,codeFold:!1,autoHeight:!1,autoFocus:!0,autoCloseTags:!0,searchReplace:!0,syncScrolling:!0,readOnly:!1,tabSize:4,indentUnit:4,lineNumbers:!0,lineWrapping:!0,autoCloseBrackets:!0,showTrailingSpace:!0,matchBrackets:!0,indentWithTabs:!0,styleSelectedText:!0,matchWordHighlight:!0,styleActiveLine:!0,dialogLockScreen:!0,dialogShowMask:!0,dialogDraggable:!0,dialogMaskBgColor:"#000",dialogMaskOpacity:.5,fontSize:"13px",saveHTMLToTextarea:!1,disabledKeyMaps:[],onload:function(){},onresize:function(){},onchange:function(){},onwatch:null,onunwatch:null,onpreviewing:function(){},onpreviewed:function(){},onfullscreen:function(){},onfullscreenExit:function(){},onscroll:function(){},onpreviewscroll:function(){},imageUpload:!1,imageFormats:["jpg","jpeg","gif","png","bmp","webp"],imageUploadURL:"",crossDomainUpload:!1,uploadCallbackURL:"",toc:!0,tocm:!1,tocTitle:"",tocDropdown:!1,tocContainer:"",tocStartLevel:1,htmlDecode:!1,pageBreak:!0,atLink:!0,emailLink:!0,taskList:!1,emoji:!1,tex:!1,flowChart:!1,sequenceDiagram:!1,previewCodeHighlight:!0,toolbar:!0,toolbarAutoFixed:!0,toolbarIcons:"full",toolbarTitles:{},toolbarHandlers:{ucwords:function(){return x.toolbarHandlers.ucwords},lowercase:function(){return x.toolbarHandlers.lowercase}},toolbarCustomIcons:{lowercase:'<a href="javascript:void(0);" title="Lowercase" unselectable="on"><i class="fa" name="lowercase" style="font-size:24px;margin-top: -10px;">a</i></a>',ucwords:'<a href="javascript:void(0);" title="ucwords" unselectable="on"><i class="fa" name="ucwords" style="font-size:20px;margin-top: -3px;">Aa</i></a>'},toolbarIconsClass:{undo:"fa-undo",redo:"fa-repeat",bold:"fa-bold",del:"fa-strikethrough",italic:"fa-italic",quote:"fa-quote-left",uppercase:"fa-font",h1:x.classPrefix+"bold",h2:x.classPrefix+"bold",h3:x.classPrefix+"bold",h4:x.classPrefix+"bold",h5:x.classPrefix+"bold",h6:x.classPrefix+"bold","list-ul":"fa-list-ul","list-ol":"fa-list-ol",hr:"fa-minus",link:"fa-link","reference-link":"fa-anchor",image:"fa-picture-o",code:"fa-code","preformatted-text":"fa-file-code-o","code-block":"fa-file-code-o",table:"fa-table",datetime:"fa-clock-o",emoji:"fa-smile-o","html-entities":"fa-copyright",pagebreak:"fa-newspaper-o","goto-line":"fa-terminal",watch:"fa-eye-slash",unwatch:"fa-eye",preview:"fa-desktop",fullscreen:"fa-arrows-alt",clear:"fa-eraser",help:"fa-question-circle",redirect:"fa-home",saving:"fa-save"},toolbarIconTexts:{},lang:{name:"zh-cn",description:"开源在线Markdown编辑器<br/>Open source online Markdown editor.",tocTitle:"目录",toolbar:{undo:"撤销（Ctrl+Z）",redo:"重做（Ctrl+Y）",bold:"粗体",del:"删除线",italic:"斜体",quote:"引用",ucwords:"将每个单词首字母转成大写",uppercase:"将所选转换成大写",lowercase:"将所选转换成小写",h1:"标题1",h2:"标题2",h3:"标题3",h4:"标题4",h5:"标题5",h6:"标题6","list-ul":"无序列表","list-ol":"有序列表",hr:"横线",link:"链接","reference-link":"引用链接",image:"添加图片",code:"行内代码","preformatted-text":"预格式文本 / 代码块（缩进风格）","code-block":"代码块（多语言风格）",table:"添加表格",datetime:"日期时间",emoji:"Emoji表情","html-entities":"HTML实体字符",pagebreak:"插入分页符","goto-line":"跳转到行",watch:"关闭实时预览",unwatch:"开启实时预览",preview:"全窗口预览HTML（按 Shift + ESC还原）",fullscreen:"全屏（按ESC还原）",clear:"清空",help:"使用帮助",redirect:"前往",saving:"保存"},buttons:{enter:"确定",cancel:"取消",close:"关闭"},dialog:{link:{title:"添加链接",url:"链接地址",urlTitle:"链接标题",urlEmpty:"错误：请填写链接地址。"},referenceLink:{title:"添加引用链接",name:"引用名称",url:"链接地址",urlId:"链接ID",urlTitle:"链接标题",nameEmpty:"错误：引用链接的名称不能为空。",idEmpty:"错误：请填写引用链接的ID。",urlEmpty:"错误：请填写引用链接的URL地址。"},image:{title:"添加图片",url:"图片地址",link:"图片链接",alt:"图片描述",uploadButton:"本地上传",imageURLEmpty:"错误：图片地址不能为空。",uploadFileEmpty:"错误：上传的图片不能为空。",formatNotAllowed:"错误：只允许上传图片文件，允许上传的图片文件格式有："},preformattedText:{title:"添加预格式文本或代码块",emptyAlert:"错误：请填写预格式文本或代码的内容。"},codeBlock:{title:"添加代码块",selectLabel:"代码语言：",selectDefaultText:"请选择代码语言",otherLanguage:"其他语言",unselectedLanguageAlert:"错误：请选择代码所属的语言类型。",codeEmptyAlert:"错误：请填写代码内容。"},htmlEntities:{title:"HTML 实体字符"},help:{title:"使用帮助"}}}},x.classNames={tex:x.classPrefix+"tex"},x.dialogZindex=99999,x.$katex=null,x.$marked=null,x.$CodeMirror=null,x.$prettyPrint=null,x.prototype=x.fn={state:{watching:!1,loaded:!1,preview:!1,fullscreen:!1},init:function(e,t){t=t||{},"object"==typeof e&&(t=e);var i=this.classPrefix=x.classPrefix,o=this.settings=b.extend(!0,x.defaults,t);e="object"==typeof e?o.id:e;var r=this.editor=b("#"+e);this.id=e,this.lang=o.lang;var n=this.classNames={textarea:{html:i+"html-textarea",markdown:i+"markdown-textarea"}};o.pluginPath=""===o.pluginPath?o.path+"../plugins/":o.pluginPath,this.state.watching=!!o.watch,r.hasClass("editormd")||r.addClass("editormd"),r.css({width:"number"==typeof o.width?o.width+"px":o.width,height:"number"==typeof o.height?o.height+"px":o.height}),o.autoHeight&&r.css("height","auto");var a=this.markdownTextarea=r.children("textarea");a.length<1&&(r.append("<textarea></textarea>"),a=this.markdownTextarea=r.children("textarea")),a.addClass(n.textarea.markdown).attr("placeholder",o.placeholder),void 0!==a.attr("name")&&""!==a.attr("name")||a.attr("name",""!==o.name?o.name:e+"-markdown-doc");var s=[o.readOnly?"":'<a href="javascript:void(0);" class="fa fa-close '+i+'preview-close-btn"></a>',o.saveHTMLToTextarea?'<textarea class="'+n.textarea.html+'" name="'+e+'-html-code"></textarea>':"",'<div class="'+i+'preview"><div class="markdown-body '+i+'preview-container"></div></div>','<div class="'+i+'container-mask" style="display:block;"></div>','<div class="'+i+'mask"></div>'].join("\n");return r.append(s).addClass(i+"vertical"),""!==o.theme&&r.addClass(i+"theme-"+o.theme),this.mask=r.children("."+i+"mask"),this.containerMask=r.children("."+i+"container-mask"),""!==o.markdown&&a.val(o.markdown),""!==o.appendMarkdown&&a.val(a.val()+o.appendMarkdown),this.htmlTextarea=r.children("."+n.textarea.html),this.preview=r.children("."+i+"preview"),this.previewContainer=this.preview.children("."+i+"preview-container"),""!==o.previewTheme&&this.preview.addClass(i+"preview-theme-"+o.previewTheme),"function"==typeof define&&define.amd&&("undefined"!=typeof katex&&(x.$katex=katex),o.searchReplace&&!o.readOnly&&(x.loadCSS(o.path+"codemirror/addon/dialog/dialog"),x.loadCSS(o.path+"codemirror/addon/search/matchesonscrollbar"))),"function"==typeof define&&define.amd||!o.autoLoadModules?("undefined"!=typeof CodeMirror&&(x.$CodeMirror=CodeMirror),"undefined"!=typeof marked&&(x.$marked=marked),this.setCodeMirror().setToolbar().loadedDisplay()):this.loadQueues(),this},loadQueues:function(){var e=this,t=this.settings,i=t.path,o=function(){x.isIE8?e.loadedDisplay():t.flowChart||t.sequenceDiagram?x.loadScript(i+"raphael.min",function(){x.loadScript(i+"underscore.min",function(){!t.flowChart&&t.sequenceDiagram?x.loadScript(i+"sequence-diagram.min",function(){e.loadedDisplay()}):t.flowChart&&!t.sequenceDiagram?x.loadScript(i+"flowchart.min",function(){x.loadScript(i+"jquery.flowchart.min",function(){e.loadedDisplay()})}):t.flowChart&&t.sequenceDiagram&&x.loadScript(i+"flowchart.min",function(){x.loadScript(i+"jquery.flowchart.min",function(){x.loadScript(i+"sequence-diagram.min",function(){e.loadedDisplay()})})})})}):e.loadedDisplay()};return x.loadCSS(i+"codemirror/codemirror.min"),t.searchReplace&&!t.readOnly&&(x.loadCSS(i+"codemirror/addon/dialog/dialog"),x.loadCSS(i+"codemirror/addon/search/matchesonscrollbar")),t.codeFold&&x.loadCSS(i+"codemirror/addon/fold/foldgutter"),x.loadScript(i+"codemirror/codemirror.min",function(){x.$CodeMirror=CodeMirror,x.loadScript(i+"codemirror/modes.min",function(){x.loadScript(i+"codemirror/addons.min",function(){if(e.setCodeMirror(),"gfm"!==t.mode&&"markdown"!==t.mode)return e.loadedDisplay(),!1;e.setToolbar(),x.loadScript(i+"marked.min",function(){x.$marked=marked,t.previewCodeHighlight?x.loadScript(i+"prettify.min",function(){o()}):o()})})})}),this},setTheme:function(e){var t=this.editor,i=this.settings.theme,o=this.classPrefix+"theme-";return t.removeClass(o+i).addClass(o+e),this.settings.theme=e,this},setEditorTheme:function(e){var t=this.settings;return"default"!==(t.editorTheme=e)&&x.loadCSS(t.path+"codemirror/theme/"+t.editorTheme),this.cm.setOption("theme",e),this},setCodeMirrorTheme:function(e){return this.setEditorTheme(e),this},setPreviewTheme:function(e){var t=this.preview,i=this.settings.previewTheme,o=this.classPrefix+"preview-theme-";return t.removeClass(o+i).addClass(o+e),this.settings.previewTheme=e,this},setCodeMirror:function(){var e=this.settings,t=this.editor;"default"!==e.editorTheme&&x.loadCSS(e.path+"codemirror/theme/"+e.editorTheme);var i={mode:e.mode,theme:e.editorTheme,tabSize:e.tabSize,dragDrop:!1,autofocus:e.autoFocus,autoCloseTags:e.autoCloseTags,readOnly:!!e.readOnly&&"nocursor",indentUnit:e.indentUnit,lineNumbers:e.lineNumbers,lineWrapping:e.lineWrapping,extraKeys:{"Ctrl-Q":function(e){e.foldCode(e.getCursor())}},foldGutter:e.codeFold,gutters:["CodeMirror-linenumbers","CodeMirror-foldgutter"],matchBrackets:e.matchBrackets,indentWithTabs:e.indentWithTabs,styleActiveLine:e.styleActiveLine,styleSelectedText:e.styleSelectedText,autoCloseBrackets:e.autoCloseBrackets,showTrailingSpace:e.showTrailingSpace,highlightSelectionMatches:!!e.matchWordHighlight&&{showToken:"onselected"!==e.matchWordHighlight&&/\w/}};return this.codeEditor=this.cm=x.$CodeMirror.fromTextArea(this.markdownTextarea[0],i),this.codeMirror=this.cmElement=t.children(".CodeMirror"),""!==e.value&&this.cm.setValue(e.value),this.codeMirror.css({fontSize:e.fontSize,width:e.watch?"50%":"100%"}),e.autoHeight&&(this.codeMirror.css("height","auto"),this.cm.setOption("viewportMargin",1/0)),e.lineNumbers||this.codeMirror.find(".CodeMirror-gutters").css("border-right","none"),this},getCodeMirrorOption:function(e){return this.cm.getOption(e)},setCodeMirrorOption:function(e,t){return this.cm.setOption(e,t),this},addKeyMap:function(e,t){return this.cm.addKeyMap(e,t),this},removeKeyMap:function(e){return this.cm.removeKeyMap(e),this},gotoLine:function(e){var t=this.settings;if(!t.gotoLine)return this;var i=this.cm,o=(this.editor,i.lineCount()),r=this.preview;if("string"==typeof e&&("last"===e&&(e=o),"first"===e&&(e=1)),"number"!=typeof e)return alert("Error: The line number must be an integer."),this;if(o<(e=parseInt(e)-1))return alert("Error: The line number range 1-"+o),this;i.setCursor({line:e,ch:0});var n=i.getScrollInfo().clientHeight,a=i.charCoords({line:e,ch:0},"local");if(i.scrollTo(null,(a.top+a.bottom-n)/2),t.watch){var s=this.codeMirror.find(".CodeMirror-scroll")[0],l=b(s).height(),c=s.scrollTop,h=c/s.scrollHeight;0===c?r.scrollTop(0):c+l>=s.scrollHeight-16?r.scrollTop(r[0].scrollHeight):r.scrollTop(r[0].scrollHeight*h)}return i.focus(),this},extend:function(){return void 0!==arguments[1]&&("function"==typeof arguments[1]&&(arguments[1]=b.proxy(arguments[1],this)),this[arguments[0]]=arguments[1]),"object"==typeof arguments[0]&&void 0===arguments[0].length&&b.extend(!0,this,arguments[0]),this},set:function(e,t){return void 0!==t&&"function"==typeof t&&(t=b.proxy(t,this)),this[e]=t,this},config:function(e,t){var i=this.settings;return"object"==typeof e&&(i=b.extend(!0,i,e)),"string"==typeof e&&(i[e]=t),this.settings=i,this.recreate(),this},on:function(e,t){var i=this.settings;return void 0!==i["on"+e]&&(i["on"+e]=b.proxy(t,this)),this},off:function(e){var t=this.settings;return void 0!==t["on"+e]&&(t["on"+e]=function(){}),this},showToolbar:function(e){var t=this.settings;return t.readOnly||(t.toolbar&&(this.toolbar.length<1||""===this.toolbar.find("."+this.classPrefix+"menu").html())&&this.setToolbar(),t.toolbar=!0,this.toolbar.show(),this.resize(),b.proxy(e||function(){},this)()),this},hideToolbar:function(e){return this.settings.toolbar=!1,this.toolbar.hide(),this.resize(),b.proxy(e||function(){},this)(),this},setToolbarAutoFixed:function(e){var t=this.state,i=this.editor,o=this.toolbar,r=this.settings;void 0!==e&&(r.toolbarAutoFixed=e);return!t.fullscreen&&!t.preview&&r.toolbar&&r.toolbarAutoFixed&&b(window).bind("scroll",function(){var e=b(window),t=e.scrollTop();if(!r.toolbarAutoFixed)return!1;10<t-i.offset().top&&t<i.height()?o.css({position:"fixed",width:i.width()+"px",left:(e.width()-i.width())/2+"px"}):o.css({position:"absolute",width:"100%",left:0})}),this},setToolbar:function(){var e=this.settings;if(e.readOnly)return this;var t=this.editor,i=(this.preview,this.classPrefix),o=this.toolbar=t.children("."+i+"toolbar");if(e.toolbar&&o.length<1){var r='<div class="'+i+'toolbar"><div class="'+i+'toolbar-container"><ul class="'+i+'menu"></ul></div></div>';t.append(r),o=this.toolbar=t.children("."+i+"toolbar")}if(!e.toolbar)return o.hide(),this;o.show();for(var n="function"==typeof e.toolbarIcons?e.toolbarIcons():"string"==typeof e.toolbarIcons?x.toolbarModes[e.toolbarIcons]:e.toolbarIcons,a=o.find("."+this.classPrefix+"menu"),s="",l=!1,c=0,h=n.length;c<h;c++){var d=n[c];if("||"===d)l=!0;else if("|"===d)s+='<li class="divider" unselectable="on">|</li>';else{var u=/h(\d)/.test(d),f=d;"watch"!==d||e.watch||(f="unwatch");var g=e.lang.toolbar[f],p=e.toolbarIconTexts[f],m=e.toolbarIconsClass[f];g=void 0===g?"":g,p=void 0===p?"":p,m=void 0===m?"":m;var w=l?'<li class="pull-right">':"<li>";void 0!==e.toolbarCustomIcons[d]&&"function"!=typeof e.toolbarCustomIcons[d]?w+=e.toolbarCustomIcons[d]:(w+='<a href="javascript:void(0);" title="'+g+'" unselectable="on">',w+='<i class="fa '+m+'" name="'+d+'" unselectable="on">'+(u?d.toUpperCase():""===m?p:"")+"</i>",w+="</a>"),w+="</li>",s=l?w+s:s+w}}return a.html(s),a.find('[title="Lowercase"]').attr("title",e.lang.toolbar.lowercase),a.find('[title="ucwords"]').attr("title",e.lang.toolbar.ucwords),this.setToolbarHandler(),this.setToolbarAutoFixed(),this},dialogLockScreen:function(){return b.proxy(x.dialogLockScreen,this)(),this},dialogShowMask:function(e){return b.proxy(x.dialogShowMask,this)(e),this},getToolbarHandles:function(e){var t=this.toolbarHandlers=x.toolbarHandlers;return e&&void 0!==toolbarIconHandlers[e]?t[e]:t},setToolbarHandler:function(){var n=this,a=this.settings;if(!a.toolbar||a.readOnly)return this;var e=this.toolbar,s=this.cm,t=this.classPrefix,i=this.toolbarIcons=e.find("."+t+"menu > li > a"),l=this.getToolbarHandles();return i.bind(x.mouseOrTouch("click","touchend"),function(e){var t=b(this).children(".fa"),i=t.attr("name"),o=s.getCursor(),r=s.getSelection();if(""!==i)return n.activeIcon=t,void 0!==l[i]?b.proxy(l[i],n)(s):void 0!==a.toolbarHandlers[i]&&b.proxy(a.toolbarHandlers[i],n)(s,t,o,r),"link"!==i&&"reference-link"!==i&&"image"!==i&&"code-block"!==i&&"preformatted-text"!==i&&"watch"!==i&&"preview"!==i&&"search"!==i&&"fullscreen"!==i&&"info"!==i&&s.focus(),!1}),this},createDialog:function(e){return b.proxy(x.createDialog,this)(e)},lockScreen:function(e){return x.lockScreen(e),this.resize(),this},recreate:function(){var e=this.editor,t=this.settings;return this.codeMirror.remove(),this.setCodeMirror(),t.readOnly||(0<e.find(".editormd-dialog").length&&e.find(".editormd-dialog").remove(),t.toolbar&&(this.getToolbarHandles(),this.setToolbar())),this.loadedDisplay(!0),this},previewCodeHighlight:function(){var e=this.settings,t=this.previewContainer;return e.previewCodeHighlight&&(t.find("pre").addClass("prettyprint linenums"),"undefined"!=typeof prettyPrint&&prettyPrint()),this},katexRender:function(){return null===f||this.previewContainer.find("."+x.classNames.tex).each(function(){var e=b(this);x.$katex.render(e.text(),e[0]),e.find(".katex").css("font-size","1.6em")}),this},flowChartAndSequenceDiagramRender:function(){var e=this.settings,t=this.previewContainer;if(x.isIE8)return this;if(e.flowChart){if(null===g)return this;t.find(".flowchart").flowChart()}e.sequenceDiagram&&t.find(".sequence-diagram").sequenceDiagram({theme:"simple"});var i=this.preview,o=this.codeMirror.find(".CodeMirror-scroll"),r=o.height(),n=o.scrollTop(),a=n/o[0].scrollHeight,s=0;i.find(".markdown-toc-list").each(function(){s+=b(this).height()});var l=i.find(".editormd-toc-menu").height();return l=l||0,0===n?i.scrollTop(0):n+r>=o[0].scrollHeight-16?i.scrollTop(i[0].scrollHeight):i.scrollTop((i[0].scrollHeight+s+l)*a),this},registerKeyMaps:function(e){var t=this,i=this.cm,o=this.settings,r=x.toolbarHandlers,n=o.disabledKeyMaps;if(e=e||null){for(var a in e)if(b.inArray(a,n)<0){e[a],i.addKeyMap(e)}}else{for(var s in x.keyMaps){var l=x.keyMaps[s],c="string"==typeof l?b.proxy(r[l],t):b.proxy(l,t);if(b.inArray(s,["F9","F10","F11"])<0&&b.inArray(s,n)<0){var h={};h[s]=c,i.addKeyMap(h)}}b(window).keydown(function(e){if(b.inArray({120:"F9",121:"F10",122:"F11"}[e.keyCode],n)<0)switch(e.keyCode){case 120:return b.proxy(r.watch,t)(),!1;case 121:return b.proxy(r.preview,t)(),!1;case 122:return b.proxy(r.fullscreen,t)(),!1}})}return this},bindScrollEvent:function(){var a=this,s=this.preview,l=this.settings,n=this.codeMirror,e=x.mouseOrTouch;if(!l.syncScrolling)return this;var t=function(){n.find(".CodeMirror-scroll").bind(e("scroll","touchmove"),function(e){var t=b(this).height(),i=b(this).scrollTop(),o=i/b(this)[0].scrollHeight,r=0;s.find(".markdown-toc-list").each(function(){r+=b(this).height()});var n=s.find(".editormd-toc-menu").height();n=n||0,0===i?s.scrollTop(0):i+t>=b(this)[0].scrollHeight-16?s.scrollTop(s[0].scrollHeight):s.scrollTop((s[0].scrollHeight+r+n)*o),b.proxy(l.onscroll,a)(e)})},i=function(){n.find(".CodeMirror-scroll").unbind(e("scroll","touchmove"))},o=function(){s.bind(e("scroll","touchmove"),function(e){var t=b(this).height(),i=b(this).scrollTop(),o=i/b(this)[0].scrollHeight,r=n.find(".CodeMirror-scroll");0===i?r.scrollTop(0):i+t>=b(this)[0].scrollHeight?r.scrollTop(r[0].scrollHeight):r.scrollTop(r[0].scrollHeight*o),b.proxy(l.onpreviewscroll,a)(e)})},r=function(){s.unbind(e("scroll","touchmove"))};return n.bind({mouseover:t,mouseout:i,touchstart:t,touchend:i}),"single"===l.syncScrolling||s.bind({mouseover:o,mouseout:r,touchstart:o,touchend:r}),this},bindChangeEvent:function(){var i=this,e=this.cm,o=this.settings;return o.syncScrolling&&e.on("change",function(e,t){o.watch&&i.previewContainer.css("padding",o.autoHeight?"20px 20px 50px 40px":"5px"),f=setTimeout(function(){clearTimeout(f),i.save(),f=null},o.delay)}),this},loadedDisplay:function(e){e=e||!1;var t=this,i=this.editor,o=this.preview,r=this.settings;return this.containerMask.hide(),this.save(),r.watch&&o.show(),i.data("oldWidth",i.width()).data("oldHeight",i.height()),this.resize(),this.registerKeyMaps(),b(window).resize(function(){t.resize()}),this.bindScrollEvent().bindChangeEvent(),e||b.proxy(r.onload,this)(),this.state.loaded=!0,this},width:function(e){return this.editor.css("width","number"==typeof e?e+"px":e),this.resize(),this},height:function(e){return this.editor.css("height","number"==typeof e?e+"px":e),this.resize(),this},resize:function(e,t){e=e||null,t=t||null;var i=this.state,o=this.editor,r=this.preview,n=this.toolbar,a=this.settings,s=this.codeMirror;if(e&&o.css("width","number"==typeof e?e+"px":e),!a.autoHeight||i.fullscreen||i.preview?(t&&o.css("height","number"==typeof t?t+"px":t),i.fullscreen&&o.height(b(window).height()),a.toolbar&&!a.readOnly?s.css("margin-top",n.height()+1).height(o.height()-n.height()):s.css("margin-top",0).height(o.height())):(o.css("height","auto"),s.css("height","auto")),a.watch)if(s.width(o.width()/2),r.width(i.preview?o.width():o.width()/2),this.previewContainer.css("padding",a.autoHeight?"20px 20px 50px 40px":"5px"),a.toolbar&&!a.readOnly?r.css("top",n.height()+1):r.css("top",0),!a.autoHeight||i.fullscreen||i.preview){var l=a.toolbar&&!a.readOnly?o.height()-n.height():o.height();r.height(l)}else r.height("");else s.width(o.width()),r.hide();return i.loaded&&b.proxy(a.onresize,this)(),this},save:function(){if(null===f)return this;var e=this,t=this.state,i=this.settings,o=this.cm,r=o.getValue(),n=this.previewContainer;if("gfm"!==i.mode&&"markdown"!==i.mode)return this.markdownTextarea.val(r),this;var a=x.$marked,s=this.markdownToC=[],l=this.markedRendererOptions={toc:i.toc,tocm:i.tocm,tocStartLevel:i.tocStartLevel,pageBreak:i.pageBreak,taskList:i.taskList,emoji:i.emoji,tex:i.tex,atLink:i.atLink,emailLink:i.emailLink,flowChart:i.flowChart,sequenceDiagram:i.sequenceDiagram,previewCodeHighlight:i.previewCodeHighlight},c=this.markedOptions={renderer:x.markedRenderer(s,l),gfm:!0,tables:!0,breaks:!0,pedantic:!1,sanitize:!i.htmlDecode,smartLists:!0,smartypants:!0};a.setOptions(c);var h=x.$marked(r,c);if(h=x.filterHTMLTags(h,i.htmlDecode),this.markdownTextarea.text(r),o.save(),i.saveHTMLToTextarea&&this.htmlTextarea.text(h),i.watch||!i.watch&&t.preview){if(n.html(h),this.previewCodeHighlight(),i.toc){var d=""===i.tocContainer?n:b(i.tocContainer),u=d.find("."+this.classPrefix+"toc-menu");d.attr("previewContainer",""===i.tocContainer?"true":"false"),""!==i.tocContainer&&0<u.length&&u.remove(),x.markdownToCRenderer(s,d,i.tocDropdown,i.tocStartLevel),(i.tocDropdown||0<d.find("."+this.classPrefix+"toc-menu").length)&&x.tocDropdownMenu(d,""!==i.tocTitle?i.tocTitle:this.lang.tocTitle),""!==i.tocContainer&&n.find(".markdown-toc").css("border","none")}i.tex&&(!x.kaTeXLoaded&&i.autoLoadModules?x.loadKaTeX(function(){x.$katex=katex,x.kaTeXLoaded=!0,e.katexRender()}):(x.$katex=katex,this.katexRender())),(i.flowChart||i.sequenceDiagram)&&(g=setTimeout(function(){clearTimeout(g),e.flowChartAndSequenceDiagramRender(),g=null},10)),t.loaded&&b.proxy(i.onchange,this)()}return this},focus:function(){return this.cm.focus(),this},setCursor:function(e){return this.cm.setCursor(e),this},getCursor:function(){return this.cm.getCursor()},setSelection:function(e,t){return this.cm.setSelection(e,t),this},getSelection:function(){return this.cm.getSelection()},setSelections:function(e){return this.cm.setSelections(e),this},getSelections:function(){return this.cm.getSelections()},replaceSelection:function(e){return this.cm.replaceSelection(e),this},insertValue:function(e){return this.replaceSelection(e),this},appendMarkdown:function(e){this.settings;var t=this.cm;return t.setValue(t.getValue()+e),this},setMarkdown:function(e){return this.cm.setValue(e||this.settings.markdown),this},getMarkdown:function(){return this.cm.getValue()},getValue:function(){return this.cm.getValue()},setValue:function(e){return this.cm.setValue(e),this},clear:function(){return this.cm.setValue(""),this},getHTML:function(){return this.settings.saveHTMLToTextarea?this.htmlTextarea.val():(alert("Error: settings.saveHTMLToTextarea == false"),!1)},getTextareaSavedHTML:function(){return this.getHTML()},getPreviewedHTML:function(){return this.settings.watch?this.previewContainer.html():(alert("Error: settings.watch == false"),!1)},watch:function(e){var t=this.settings;if(b.inArray(t.mode,["gfm","markdown"])<0)return this;if(this.state.watching=t.watch=!0,this.preview.show(),this.toolbar){var i=t.toolbarIconsClass.watch,o=t.toolbarIconsClass.unwatch,r=this.toolbar.find(".fa[name=watch]");r.parent().attr("title",t.lang.toolbar.watch),r.removeClass(o).addClass(i)}return this.codeMirror.css("border-right","1px solid #ddd").width(this.editor.width()/2),f=0,this.save().resize(),t.onwatch||(t.onwatch=e||function(){}),b.proxy(t.onwatch,this)(),this},unwatch:function(e){var t=this.settings;if(this.state.watching=t.watch=!1,this.preview.hide(),this.toolbar){var i=t.toolbarIconsClass.watch,o=t.toolbarIconsClass.unwatch,r=this.toolbar.find(".fa[name=watch]");r.parent().attr("title",t.lang.toolbar.unwatch),r.removeClass(i).addClass(o)}return this.codeMirror.css("border-right","none").width(this.editor.width()),this.resize(),t.onunwatch||(t.onunwatch=e||function(){}),b.proxy(t.onunwatch,this)(),this},show:function(e){e=e||function(){};var t=this;return this.editor.show(0,function(){b.proxy(e,t)()}),this},hide:function(e){e=e||function(){};var t=this;return this.editor.hide(0,function(){b.proxy(e,t)()}),this},previewing:function(){var t=this,e=this.editor,i=this.preview,o=this.toolbar,r=this.settings,n=this.codeMirror,a=this.previewContainer;if(b.inArray(r.mode,["gfm","markdown"])<0)return this;r.toolbar&&o&&(o.toggle(),o.find(".fa[name=preview]").toggleClass("active")),n.toggle();var s=function(e){e.shiftKey&&27===e.keyCode&&t.previewed()};"none"===n.css("display")?(this.state.preview=!0,this.state.fullscreen&&i.css("background","#fff"),e.find("."+this.classPrefix+"preview-close-btn").show().bind(x.mouseOrTouch("click","touchend"),function(){t.previewed()}),r.watch?a.css("padding",""):this.save(),a.addClass(this.classPrefix+"preview-active"),i.show().css({position:"",top:0,width:e.width(),height:r.autoHeight&&!this.state.fullscreen?"auto":e.height()}),this.state.loaded&&b.proxy(r.onpreviewing,this)(),b(window).bind("keyup",s)):(b(window).unbind("keyup",s),this.previewed())},previewed:function(){var e=this.editor,t=this.preview,i=this.toolbar,o=this.settings,r=this.previewContainer,n=e.find("."+this.classPrefix+"preview-close-btn");return this.state.preview=!1,this.codeMirror.show(),o.toolbar&&i.show(),t[o.watch?"show":"hide"](),n.hide().unbind(x.mouseOrTouch("click","touchend")),r.removeClass(this.classPrefix+"preview-active"),o.watch&&r.css("padding","5"),t.css({background:null,position:"absolute",width:e.width()/2,height:o.autoHeight&&!this.state.fullscreen?"auto":e.height()-i.height(),top:o.toolbar?i.height():0}),this.state.loaded&&b.proxy(o.onpreviewed,this)(),this},fullscreen:function(){var t=this,i=this.state,e=this.editor,o=(this.preview,this.toolbar),r=this.settings,n=this.classPrefix+"fullscreen";o&&o.find(".fa[name=fullscreen]").parent().toggleClass("active");var a=function(e){e.shiftKey||27!==e.keyCode||i.fullscreen&&t.fullscreenExit()};return e.hasClass(n)?(b(window).unbind("keyup",a),this.fullscreenExit()):(i.fullscreen=!0,b("html,body").css("overflow","hidden"),e.css({width:b(window).width(),height:b(window).height()}).addClass(n),this.resize(),b.proxy(r.onfullscreen,this)(),b(window).bind("keyup",a)),this},fullscreenExit:function(){var e=this.editor,t=this.settings,i=this.toolbar,o=this.classPrefix+"fullscreen";return this.state.fullscreen=!1,i&&i.find(".fa[name=fullscreen]").parent().removeClass("active"),b("html,body").css("overflow",""),e.css({width:e.data("oldWidth"),height:e.data("oldHeight")}).removeClass(o),this.resize(),b.proxy(t.onfullscreenExit,this)(),this},executePlugin:function(e,t){var i=this,o=this.cm;return t=this.settings.pluginPath+t,"function"==typeof define?void 0===this[e]?alert("Error: "+e+" plugin is not found, you are not load this plugin."):this[e](o):b.inArray(t,x.loadFiles.plugin)<0?x.loadPlugin(t,function(){x.loadPlugins[e]=i[e],i[e](o)}):b.proxy(x.loadPlugins[e],this)(o),this}},x.fn.init.prototype=x.fn,x.dialogLockScreen=function(){(this.settings||{dialogLockScreen:!0}).dialogLockScreen&&(b("html,body").css("overflow","hidden"),this.resize())},x.dialogShowMask=function(e){var t=this.editor,i=this.settings||{dialogShowMask:!0};e.css({top:(b(window).height()-e.height())/2+"px",left:(b(window).width()-e.width())/2+"px"}),i.dialogShowMask&&t.children("."+this.classPrefix+"mask").css("z-index",parseInt(e.css("z-index"))-1).show()},x.toolbarHandlers={undo:function(){this.cm.undo()},redo:function(){this.cm.redo()},bold:function(){var e=this.cm,t=e.getCursor(),i=e.getSelection();e.replaceSelection("**"+i+"**"),""===i&&e.setCursor(t.line,t.ch+2)},del:function(){var e=this.cm,t=e.getCursor(),i=e.getSelection();e.replaceSelection("~~"+i+"~~"),""===i&&e.setCursor(t.line,t.ch+2)},italic:function(){var e=this.cm,t=e.getCursor(),i=e.getSelection();e.replaceSelection("*"+i+"*"),""===i&&e.setCursor(t.line,t.ch+1)},quote:function(){var e=this.cm,t=e.getCursor(),i=e.getSelection();0!==t.ch?(e.setCursor(t.line,0),e.replaceSelection("> "+i),e.setCursor(t.line,t.ch+2)):e.replaceSelection("> "+i)},ucfirst:function(){var e=this.cm,t=e.getSelection(),i=e.listSelections();e.replaceSelection(x.firstUpperCase(t)),e.setSelections(i)},ucwords:function(){var e=this.cm,t=e.getSelection(),i=e.listSelections();e.replaceSelection(x.wordsFirstUpperCase(t)),e.setSelections(i)},uppercase:function(){var e=this.cm,t=e.getSelection(),i=e.listSelections();e.replaceSelection(t.toUpperCase()),e.setSelections(i)},lowercase:function(){var e=this.cm,t=(e.getCursor(),e.getSelection()),i=e.listSelections();e.replaceSelection(t.toLowerCase()),e.setSelections(i)},h1:function(){var e=this.cm,t=e.getCursor(),i=e.getSelection();0!==t.ch?(e.setCursor(t.line,0),e.replaceSelection("# "+i),e.setCursor(t.line,t.ch+2)):e.replaceSelection("# "+i)},h2:function(){var e=this.cm,t=e.getCursor(),i=e.getSelection();0!==t.ch?(e.setCursor(t.line,0),e.replaceSelection("## "+i),e.setCursor(t.line,t.ch+3)):e.replaceSelection("## "+i)},h3:function(){var e=this.cm,t=e.getCursor(),i=e.getSelection();0!==t.ch?(e.setCursor(t.line,0),e.replaceSelection("### "+i),e.setCursor(t.line,t.ch+4)):e.replaceSelection("### "+i)},h4:function(){var e=this.cm,t=e.getCursor(),i=e.getSelection();0!==t.ch?(e.setCursor(t.line,0),e.replaceSelection("#### "+i),e.setCursor(t.line,t.ch+5)):e.replaceSelection("#### "+i)},h5:function(){var e=this.cm,t=e.getCursor(),i=e.getSelection();0!==t.ch?(e.setCursor(t.line,0),e.replaceSelection("##### "+i),e.setCursor(t.line,t.ch+6)):e.replaceSelection("##### "+i)},h6:function(){var e=this.cm,t=e.getCursor(),i=e.getSelection();0!==t.ch?(e.setCursor(t.line,0),e.replaceSelection("###### "+i),e.setCursor(t.line,t.ch+7)):e.replaceSelection("###### "+i)},"list-ul":function(){var e=this.cm,t=(e.getCursor(),e.getSelection());if(""===t)e.replaceSelection("- "+t);else{for(var i=t.split("\n"),o=0,r=i.length;o<r;o++)i[o]=""===i[o]?"":"- "+i[o];e.replaceSelection(i.join("\n"))}},"list-ol":function(){var e=this.cm,t=(e.getCursor(),e.getSelection());if(""===t)e.replaceSelection("1. "+t);else{for(var i=t.split("\n"),o=0,r=i.length;o<r;o++)i[o]=""===i[o]?"":o+1+". "+i[o];e.replaceSelection(i.join("\n"))}},hr:function(){var e=this.cm,t=e.getCursor();e.getSelection();e.replaceSelection((0!==t.ch?"\n\n":"\n")+"------------\n\n")},tex:function(){if(!this.settings.tex)return alert("settings.tex === false"),this;var e=this.cm,t=e.getCursor(),i=e.getSelection();e.replaceSelection("$$"+i+"$$"),""===i&&e.setCursor(t.line,t.ch+2)},link:function(){this.executePlugin("linkDialog","link-dialog/link-dialog")},"reference-link":function(){this.executePlugin("referenceLinkDialog","reference-link-dialog/reference-link-dialog")},pagebreak:function(){if(!this.settings.pageBreak)return alert("settings.pageBreak === false"),this;var e=this.cm;e.getSelection();e.replaceSelection("\r\n[========]\r\n")},image:function(){this.executePlugin("imageDialog","image-dialog/image-dialog")},code:function(){var e=this.cm,t=e.getCursor(),i=e.getSelection();e.replaceSelection("`"+i+"`"),""===i&&e.setCursor(t.line,t.ch+1)},"code-block":function(){this.executePlugin("codeBlockDialog","code-block-dialog/code-block-dialog")},"preformatted-text":function(){this.executePlugin("preformattedTextDialog","preformatted-text-dialog/preformatted-text-dialog")},table:function(){this.executePlugin("tableDialog","table-dialog/table-dialog")},datetime:function(){var e=this.cm,t=(e.getSelection(),new Date,this.settings.lang.name),i=x.dateFormat()+" "+x.dateFormat("zh-cn"===t||"zh-tw"===t?"cn-week-day":"week-day");e.replaceSelection(i)},emoji:function(){this.executePlugin("emojiDialog","emoji-dialog/emoji-dialog")},"html-entities":function(){this.executePlugin("htmlEntitiesDialog","html-entities-dialog/html-entities-dialog")},"goto-line":function(){this.executePlugin("gotoLineDialog","goto-line-dialog/goto-line-dialog")},watch:function(){this[this.settings.watch?"unwatch":"watch"]()},preview:function(){this.previewing()},fullscreen:function(){this.fullscreen()},clear:function(){this.clear()},help:function(){this.executePlugin("helpDialog","help-dialog/help-dialog")}},x.keyMaps={"Ctrl-1":"h1","Ctrl-2":"h2","Ctrl-3":"h3","Ctrl-4":"h4","Ctrl-5":"h5","Ctrl-6":"h6","Ctrl-B":"bold","Ctrl-D":"datetime","Ctrl-E":function(){var e=this.cm,t=e.getCursor(),i=e.getSelection();this.settings.emoji?(e.replaceSelection(":"+i+":"),""===i&&e.setCursor(t.line,t.ch+1)):alert("Error: settings.emoji == false")},"Ctrl-Alt-G":"goto-line","Ctrl-H":"hr","Ctrl-I":"italic","Ctrl-K":"code","Ctrl-L":function(){var e=this.cm,t=e.getCursor(),i=e.getSelection(),o=""===i?"":' "'+i+'"';e.replaceSelection("["+i+"]("+o+")"),""===i&&e.setCursor(t.line,t.ch+1)},"Ctrl-U":"list-ul","Shift-Ctrl-A":function(){var e=this.cm,t=e.getCursor(),i=e.getSelection();this.settings.atLink?(e.replaceSelection("@"+i),""===i&&e.setCursor(t.line,t.ch+1)):alert("Error: settings.atLink == false")},"Shift-Ctrl-C":"code","Shift-Ctrl-Q":"quote","Shift-Ctrl-S":"del","Shift-Ctrl-K":"tex","Shift-Alt-C":function(){var e=this.cm,t=e.getCursor(),i=e.getSelection();e.replaceSelection(["```",i,"```"].join("\n")),""===i&&e.setCursor(t.line,t.ch+3)},"Shift-Ctrl-Alt-C":"code-block","Shift-Ctrl-H":"html-entities","Shift-Alt-H":"help","Shift-Ctrl-E":"emoji","Shift-Ctrl-U":"uppercase","Shift-Alt-U":"ucwords","Shift-Ctrl-Alt-U":"ucfirst","Shift-Alt-L":"lowercase","Shift-Ctrl-I":function(){var e=this.cm,t=e.getCursor(),i=e.getSelection(),o=""===i?"":' "'+i+'"';e.replaceSelection("!["+i+"]("+o+")"),""===i&&e.setCursor(t.line,t.ch+4)},"Shift-Ctrl-Alt-I":"image","Shift-Ctrl-L":"link","Shift-Ctrl-O":"list-ol","Shift-Ctrl-P":"preformatted-text","Shift-Ctrl-T":"table","Shift-Alt-P":"pagebreak",F9:"watch",F10:"preview",F11:"fullscreen"};var p=function(e){return String.prototype.trim?e.trim():e.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,"")};x.trim=p;x.ucwords=x.wordsFirstUpperCase=function(e){return e.toLowerCase().replace(/\b(\w)|\s(\w)/g,function(e){return e.toUpperCase()})};var e=function(e){return e.toLowerCase().replace(/\b(\w)/,function(e){return e.toUpperCase()})};return x.firstUpperCase=x.ucfirst=e,x.urls={atLinkBase:window.location.href+"?name="},x.regexs={atLink:/@(\w+)/g,email:/(\w+)@(\w+)\.(\w+)\.?(\w+)?/g,emailLink:/(mailto:)?([\w\.\_]+)@(\w+)\.(\w+)\.?(\w+)?/g,emoji:/:([\w\+-]+):/g,emojiDatetime:/(\d{2}:\d{2}:\d{2})/g,twemoji:/:(tw-([\w]+)-?(\w+)?):/g,fontAwesome:/:(fa-([\w]+)(-(\w+)){0,}):/g,editormdLogo:/:(editormd-logo-?(\w+)?):/g,pageBreak:/^\[[=]{8,}\]$/},x.emoji={path:"http://www.emoji-cheat-sheet.com/graphics/emojis/",ext:".png"},x.twemoji={path:"http://twemoji.maxcdn.com/36x36/",ext:".png"},x.markedRenderer=function(u,e){var s=b.extend({toc:!0,tocm:!1,tocStartLevel:1,pageBreak:!0,atLink:!0,emailLink:!0,taskList:!1,emoji:!1,tex:!1,flowChart:!1,sequenceDiagram:!1},e||{}),o=x.$marked,t=new o.Renderer;u=u||[];var i=x.regexs,n=i.atLink,r=i.emoji,a=i.email,l=i.emailLink,m=i.twemoji,w=i.fontAwesome,v=i.editormdLogo,c=i.pageBreak;return t.emoji=function(e){var t=(e=e.replace(x.regexs.emojiDatetime,function(e){return e.replace(/:/g,"&#58;")})).match(r);if(!t||!s.emoji)return e;for(var i=0,o=t.length;i<o;i++)":+1:"===t[i]&&(t[i]=":\\+1:"),e=e.replace(new RegExp(t[i]),function(e,t){var i=e.match(w),o=e.replace(/:/g,"");if(i)for(var r=0,n=i.length;r<n;r++){var a=i[r].replace(/:/g,"");return'<i class="fa '+a+' fa-emoji" title="'+a.replace("fa-","")+'"></i>'}else{var s=e.match(v),l=e.match(m);if(s)for(var c=0,h=s.length;c<h;c++){var d=s[c].replace(/:/g,"");return'<i class="'+d+'" title="Editor.md logo ('+d+')"></i>'}else{if(!l){var u="+1"===o?"plus1":o;return u="moon"===(u="black_large_square"===u?"black_square":u)?"waxing_gibbous_moon":u,'<img src="'+x.emoji.path+u+x.emoji.ext+'" class="emoji" title="&#58;'+o+'&#58;" alt="&#58;'+o+'&#58;" />'}for(var f=0,g=l.length;f<g;f++){var p=l[f].replace(/:/g,"").replace("tw-","");return'<img src="'+x.twemoji.path+p+x.twemoji.ext+'" title="twemoji-'+p+'" alt="twemoji-'+p+'" class="emoji twemoji" />'}}}});return e},t.atLink=function(e){return n.test(e)&&(s.atLink&&(e=(e=e.replace(a,function(e,t,i,o){return e.replace(/@/g,"_#_&#64;_#_")})).replace(n,function(e,t){return'<a href="'+x.urls.atLinkBase+t+'" title="&#64;'+t+'" class="at-link">'+e+"</a>"}).replace(/_#_&#64;_#_/g,"@")),s.emailLink&&(e=e.replace(l,function(e,t,i,o,r){return!t&&b.inArray(r,"jpg|jpeg|png|gif|webp|ico|icon|pdf".split("|"))<0?'<a href="mailto:'+e+'">'+e+"</a>":e}))),e},t.link=function(e,t,i){if(this.options.sanitize){try{var o=decodeURIComponent(unescape(e)).replace(/[^\w:]/g,"").toLowerCase()}catch(e){return""}if(0===o.indexOf("javascript:"))return""}var r='<a href="'+e+'"';return n.test(t)||n.test(i)?(t&&(r+=' title="'+t.replace(/@/g,"&#64;")),r+'">'+i.replace(/@/g,"&#64;")+"</a>"):(t&&(r+=' title="'+t+'"'),r+=">"+i+"</a>")},t.heading=function(e,t,i){var o=e,r=/\s*\<a\s*href\=\"(.*)\"\s*([^\>]*)\>(.*)\<\/a\>\s*/;if(r.test(e)){for(var n=[],a=0,s=(e=e.split(/\<a\s*([^\>]+)\>([^\>]*)\<\/a\>/)).length;a<s;a++)n.push(e[a].replace(/\s*href\=\"(.*)\"\s*/g,""));e=n.join(" ")}var l=(e=p(e)).toLowerCase().replace(/[^\w]+/g,"-"),c={text:e,level:t,slug:l},h=/^[\u4e00-\u9fa5]+$/.test(e)?escape(e).replace(/\%/g,""):e.toLowerCase().replace(/[^\w]+/g,"-");u.push(c);var d="<h"+t+' id="h'+t+"-"+this.options.headerPrefix+h+'">';return d+='<a name="'+e+'" class="reference-link"></a>',d+='<span class="header-link octicon octicon-link"></span>',d+=r?this.atLink(this.emoji(o)):this.atLink(this.emoji(e)),d+="</h"+t+">"},t.pageBreak=function(e){return c.test(e)&&s.pageBreak&&(e='<hr style="page-break-after:always;" class="page-break editormd-page-break" />'),e},t.paragraph=function(e){var t=/\$\$(.*)\$\$/g.test(e),i=/^\$\$(.*)\$\$$/.test(e),o=i?' class="'+x.classNames.tex+'"':"",r=s.tocm?/^(\[TOC\]|\[TOCM\])$/.test(e):/^\[TOC\]$/.test(e),n=/^\[TOCM\]$/.test(e),a='<div class="markdown-toc editormd-markdown-toc">'+(e=!i&&t?e.replace(/(\$\$([^\$]*)\$\$)+/g,function(e,t){return'<span class="'+x.classNames.tex+'">'+t.replace(/\$/g,"")+"</span>"}):i?e.replace(/\$/g,""):e)+"</div>";return r?n?'<div class="editormd-toc-menu">'+a+"</div><br/>":a:c.test(e)?this.pageBreak(e):"<p"+o+">"+this.atLink(this.emoji(e))+"</p>\n"},t.code=function(e,t,i){return"seq"===t||"sequence"===t?'<div class="sequence-diagram">'+e+"</div>":"flow"===t?'<div class="flowchart">'+e+"</div>":"math"===t||"latex"===t||"katex"===t?'<p class="'+x.classNames.tex+'">'+e+"</p>":o.Renderer.prototype.code.apply(this,arguments)},t.tablecell=function(e,t){var i=t.header?"th":"td";return(t.align?"<"+i+' style="text-align:'+t.align+'">':"<"+i+">")+this.atLink(this.emoji(e))+"</"+i+">\n"},t.listitem=function(e){return s.taskList&&/^\s*\[[x\s]\]\s*/.test(e)?(e=e.replace(/^\s*\[\s\]\s*/,'<input type="checkbox" class="task-list-item-checkbox" /> ').replace(/^\s*\[x\]\s*/,'<input type="checkbox" class="task-list-item-checkbox" checked disabled /> '),'<li style="list-style: none;">'+this.atLink(this.emoji(e))+"</li>"):"<li>"+this.atLink(this.emoji(e))+"</li>"},t},x.markdownToCRenderer=function(e,t,i,o){var r="",n=0,a=this.classPrefix;o=o||1;for(var s=0,l=e.length;s<l;s++){var c=e[s].text,h=e[s].level;h<o||(r+=n<h?"":h<n?new Array(n-h+2).join("</ul></li>"):"</ul></li>",r+='<li><a class="toc-level-'+h+'" href="#'+c+'" level="'+h+'">'+c+"</a><ul>",n=h)}var d=t.find(".markdown-toc");if(d.length<1&&"false"===t.attr("previewContainer")){var u='<div class="markdown-toc '+a+'markdown-toc"></div>';u=i?'<div class="'+a+'toc-menu">'+u+"</div>":u,t.html(u),d=t.find(".markdown-toc")}return i&&d.wrap('<div class="'+a+'toc-menu"></div><br/>'),d.html('<ul class="markdown-toc-list"></ul>').children(".markdown-toc-list").html(r.replace(/\r?\n?\<ul\>\<\/ul\>/g,"")),d},x.tocDropdownMenu=function(e,a){a=a||"Table of Contents";var s=400,t=e.find("."+this.classPrefix+"toc-menu");return t.each(function(){var e=b(this),t=e.children(".markdown-toc"),o='<i class="fa fa-angle-down"></i>',i='<a href="javascript:void(0);" class="toc-menu-btn">'+o+a+"</a>",r=t.children("ul"),n=r.find("li");t.append(i),n.first().before("<li><h1>"+a+" "+o+"</h1></li>"),e.mouseover(function(){r.show(),n.each(function(){var e=b(this),t=e.children("ul");if(""===t.html()&&t.remove(),0<t.length&&""!==t.html()){var i=e.children("a").first();i.children(".fa").length<1&&i.append(b(o).css({float:"right",paddingTop:"4px"}))}e.mouseover(function(){t.css("z-index",s).show(),s+=1}).mouseleave(function(){t.hide()})})}).mouseleave(function(){r.hide()})}),t},x.filterHTMLTags=function(e,t){if("string"!=typeof e&&(e=new String(e)),"string"!=typeof t)return e;for(var i=t.split("|"),o=i[0].split(","),a=i[1],r=0,n=o.length;r<n;r++){var s=o[r];e=e.replace(new RegExp("<s*"+s+"s*([^>]*)>([^>]*)<s*/"+s+"s*>","igm"),"")}if(void 0!==a){var l=/\<(\w+)\s*([^\>]*)\>([^\>]*)\<\/(\w+)\>/gi;e="*"===a?e.replace(l,function(e,t,i,o,r){return"<"+t+">"+o+"</"+r+">"}):"on*"===a?e.replace(l,function(e,t,i,o,r){var n=b("<"+t+">"+o+"</"+r+">"),a=b(e)[0].attributes,s={};b.each(a,function(e,t){'"'!==t.nodeName&&(s[t.nodeName]=t.nodeValue)}),b.each(s,function(e){0===e.indexOf("on")&&delete s[e]}),n.attr(s);var l=void 0!==n[1]?b(n[1]).text():"";return n[0].outerHTML+l}):e.replace(l,function(e,t,i,o){var r=a.split(","),n=b(e);return n.html(o),b.each(r,function(e){n.attr(r[e],null)}),n[0].outerHTML})}return e},x.markdownToHTML=function(e,t){x.$marked=marked;var i=b("#"+e),o=i.settings=b.extend(!0,{gfm:!0,toc:!0,tocm:!1,tocStartLevel:1,tocTitle:"目录",tocDropdown:!1,tocContainer:"",markdown:"",markdownSourceCode:!1,htmlDecode:!1,autoLoadKaTeX:!0,pageBreak:!0,atLink:!0,emailLink:!0,tex:!1,taskList:!1,emoji:!1,flowChart:!1,sequenceDiagram:!1,previewCodeHighlight:!0},t||{}),r=i.find("textarea");r.length<1&&(i.append("<textarea></textarea>"),r=i.find("textarea"));var n=""===o.markdown?r.val():o.markdown,a=[],s={toc:o.toc,tocm:o.tocm,tocStartLevel:o.tocStartLevel,taskList:o.taskList,emoji:o.emoji,tex:o.tex,pageBreak:o.pageBreak,atLink:o.atLink,emailLink:o.emailLink,flowChart:o.flowChart,sequenceDiagram:o.sequenceDiagram,previewCodeHighlight:o.previewCodeHighlight},l={renderer:x.markedRenderer(a,s),gfm:o.gfm,tables:!0,breaks:!0,pedantic:!1,sanitize:!o.htmlDecode,smartLists:!0,smartypants:!0};n=new String(n);var c=marked(n,l);c=x.filterHTMLTags(c,o.htmlDecode),o.markdownSourceCode?r.text(n):r.remove(),i.addClass("markdown-body "+this.classPrefix+"html-preview").append(c);var h=""!==o.tocContainer?b(o.tocContainer):i;if(""!==o.tocContainer&&h.attr("previewContainer",!1),o.toc&&(i.tocContainer=this.markdownToCRenderer(a,h,o.tocDropdown,o.tocStartLevel),(o.tocDropdown||0<i.find("."+this.classPrefix+"toc-menu").length)&&this.tocDropdownMenu(i,o.tocTitle),""!==o.tocContainer&&i.find(".editormd-toc-menu, .editormd-markdown-toc").remove()),o.previewCodeHighlight&&(i.find("pre").addClass("prettyprint linenums"),prettyPrint()),x.isIE8||(o.flowChart&&i.find(".flowchart").flowChart(),o.sequenceDiagram&&i.find(".sequence-diagram").sequenceDiagram({theme:"simple"})),o.tex){var d=function(){i.find("."+x.classNames.tex).each(function(){var e=b(this);katex.render(e.html().replace(/&lt;/g,"<").replace(/&gt;/g,">"),e[0]),e.find(".katex").css("font-size","1.6em")})};!o.autoLoadKaTeX||x.$katex||x.kaTeXLoaded?d():this.loadKaTeX(function(){x.$katex=katex,x.kaTeXLoaded=!0,d()})}return i.getMarkdown=function(){return r.val()},i},x.themes=["default","dark"],x.previewThemes=["default","dark"],x.editorThemes=["default","3024-day","3024-night","ambiance","ambiance-mobile","base16-dark","base16-light","blackboard","cobalt","eclipse","elegant","erlang-dark","lesser-dark","mbo","mdn-like","midnight","monokai","neat","neo","night","paraiso-dark","paraiso-light","pastel-on-dark","rubyblue","solarized","the-matrix","tomorrow-night-eighties","twilight","vibrant-ink","xq-dark","xq-light"],x.loadPlugins={},x.loadFiles={js:[],css:[],plugin:[]},x.loadPlugin=function(e,t,i){t=t||function(){},this.loadScript(e,function(){x.loadFiles.plugin.push(e),t()},i)},x.loadCSS=function(e,t,i){i=i||"head",t=t||function(){};var o=document.createElement("link");o.type="text/css",o.rel="stylesheet",o.onload=o.onreadystatechange=function(){x.loadFiles.css.push(e),t()},o.href=e+".css","head"===i?document.getElementsByTagName("head")[0].appendChild(o):document.body.appendChild(o)},x.isIE="Microsoft Internet Explorer"==navigator.appName,x.isIE8=x.isIE&&"8."==navigator.appVersion.match(/8./i),x.loadScript=function(e,t,i){i=i||"head",t=t||function(){};var o=null;(o=document.createElement("script")).id=e.replace(/[\./]+/g,"-"),o.type="text/javascript",o.src=e+".js",x.isIE8?o.onreadystatechange=function(){o.readyState&&("loaded"!==o.readyState&&"complete"!==o.readyState||(o.onreadystatechange=null,x.loadFiles.js.push(e),t()))}:o.onload=function(){x.loadFiles.js.push(e),t()},"head"===i?document.getElementsByTagName("head")[0].appendChild(o):document.body.appendChild(o)},x.katexURL={css:"//cdnjs.cloudflare.com/ajax/libs/KaTeX/0.3.0/katex.min",js:"//cdnjs.cloudflare.com/ajax/libs/KaTeX/0.3.0/katex.min"},x.kaTeXLoaded=!1,x.loadKaTeX=function(e){x.loadCSS(x.katexURL.css,function(){x.loadScript(x.katexURL.js,e||function(){})})},x.lockScreen=function(e){b("html,body").css("overflow",e?"hidden":"")},x.createDialog=function(t){t=b.extend(!0,{name:"",width:420,height:240,title:"",drag:!0,closed:!0,content:"",mask:!0,maskStyle:{backgroundColor:"#fff",opacity:.1},lockScreen:!0,footer:!0,buttons:!1},t);var i=this,e=this.editor,o=x.classPrefix,r=(new Date).getTime(),n=""===t.name?o+"dialog-"+r:t.name,a=x.mouseOrTouch,s='<div class="'+o+"dialog "+n+'">';""!==t.title&&(s+='<div class="'+o+'dialog-header"'+(t.drag?' style="cursor: move;"':"")+">",s+='<strong class="'+o+'dialog-title">'+t.title+"</strong>",s+="</div>"),t.closed&&(s+='<a href="javascript:void(0);" class="fa fa-close '+o+'dialog-close"></a>'),s+='<div class="'+o+'dialog-container">'+t.content,(t.footer||"string"==typeof t.footer)&&(s+='<div class="'+o+'dialog-footer">'+("boolean"==typeof t.footer?"":t.footer)+"</div>"),s+="</div>",s+='<div class="'+o+"dialog-mask "+o+'dialog-mask-bg"></div>',s+='<div class="'+o+"dialog-mask "+o+'dialog-mask-con"></div>',s+="</div>",e.append(s);var l=e.find("."+n);l.lockScreen=function(e){return t.lockScreen&&(b("html,body").css("overflow",e?"hidden":""),i.resize()),l},l.showMask=function(){return t.mask&&e.find("."+o+"mask").css(t.maskStyle).css("z-index",x.dialogZindex-1).show(),l},l.hideMask=function(){return t.mask&&e.find("."+o+"mask").hide(),l},l.loading=function(e){return l.find("."+o+"dialog-mask")[e?"show":"hide"](),l},l.lockScreen(!0).showMask(),l.show().css({zIndex:x.dialogZindex,border:x.isIE8?"1px solid #ddd":"",width:"number"==typeof t.width?t.width+"px":t.width,height:"number"==typeof t.height?t.height+"px":t.height});var c=function(){l.css({top:(b(window).height()-l.height())/2+"px",left:(b(window).width()-l.width())/2+"px"})};if(c(),b(window).resize(c),l.children("."+o+"dialog-close").bind(a("click","touchend"),function(){l.hide().lockScreen(!1).hideMask()}),"object"==typeof t.buttons){var h=l.footer=l.find("."+o+"dialog-footer");for(var d in t.buttons){var u=t.buttons[d],f=o+d+"-btn";h.append('<button class="'+o+"btn "+f+'">'+u[0]+"</button>"),u[1]=b.proxy(u[1],l),h.children("."+f).bind(a("click","touchend"),u[1])}}if(""!==t.title&&t.drag){var g,p,m=l.children("."+o+"dialog-header");t.mask||m.bind(a("click","touchend"),function(){x.dialogZindex+=2,l.css("z-index",x.dialogZindex)}),m.mousedown(function(e){e=e||window.event,g=e.clientX-parseInt(l[0].style.left),p=e.clientY-parseInt(l[0].style.top),document.onmousemove=k});var w=function(e){e.removeClass(o+"user-unselect").off("selectstart")},v=function(e){e.addClass(o+"user-unselect").on("selectstart",function(e){return!1})},k=function(e){e=e||window.event;var t,i,o=parseInt(l[0].style.left),r=parseInt(l[0].style.top);0<=o?o+l.width()<=b(window).width()?t=e.clientX-g:(t=b(window).width()-l.width(),document.onmousemove=null):(t=0,document.onmousemove=null),0<=r?i=e.clientY-p:(i=0,document.onmousemove=null),document.onselectstart=function(){return!1},v(b("body")),v(l),l[0].style.left=t+"px",l[0].style.top=i+"px"};document.onmouseup=function(){w(b("body")),w(l),document.onselectstart=null,document.onmousemove=null},m.touchDraggable=function(){var o=null;this.bind("touchstart",function(e){var t=e.originalEvent,i=b(this).parent().position();o={x:t.changedTouches[0].pageX-i.left,y:t.changedTouches[0].pageY-i.top}}).bind("touchmove",function(e){e.preventDefault();var t=e.originalEvent;b(this).parent().css({top:t.changedTouches[0].pageY-o.y,left:t.changedTouches[0].pageX-o.x})})},m.touchDraggable()}return x.dialogZindex+=2,l},x.mouseOrTouch=function(e,t){t=t||"touchend";var i=e=e||"click";try{document.createEvent("TouchEvent"),i=t}catch(e){}return i},x.dateFormat=function(e){e=e||"";var t=function(e){return e<10?"0"+e:e},i=new Date,o=i.getFullYear(),r=o.toString().slice(2,4),n=t(i.getMonth()+1),a=t(i.getDate()),s=i.getDay(),l=t(i.getHours()),c=t(i.getMinutes()),h=t(i.getSeconds()),d=t(i.getMilliseconds()),u="",f=r+"-"+n+"-"+a,g=o+"-"+n+"-"+a,p=l+":"+c+":"+h;switch(e){case"UNIX Time":u=i.getTime();break;case"UTC":u=i.toUTCString();break;case"yy":u=r;break;case"year":case"yyyy":u=o;break;case"month":case"mm":u=n;break;case"cn-week-day":case"cn-wd":u="星期"+["日","一","二","三","四","五","六"][s];break;case"week-day":case"wd":u=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"][s];break;case"day":case"dd":u=a;break;case"hour":case"hh":u=l;break;case"min":case"ii":u=c;break;case"second":case"ss":u=h;break;case"ms":u=d;break;case"yy-mm-dd":u=f;break;case"yyyy-mm-dd":u=g;break;case"yyyy-mm-dd h:i:s ms":case"full + ms":u=g+" "+p+" "+d;break;case"full":case"yyyy-mm-dd h:i:s":default:u=g+" "+p}return u},x}});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
